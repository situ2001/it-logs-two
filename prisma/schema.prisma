// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    createAt      DateTime  @default(now()) @map("create_at")
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?

    // TODO add constriant that at most only one of two fields should be non-null value
    relationAsinviter Relation? @relation("inviterId")
    relationAsInvitee Relation? @relation("inviteeId")

    tweets   Tweet[]
    accounts Account[]
    sessions Session[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Tweet {
    id       String    @id @default(cuid())
    createAt DateTime  @default(now()) @map("create_at")
    editAt   DateTime? @map("edit_at")
    content  String // store base64-encoded text

    author     User     @relation(fields: [userId], references: [id], onDelete: Cascade) // as a foreign key
    userId     String   @map("user_id")
    relation   Relation @relation(fields: [relationId], references: [id], onDelete: Cascade)
    relationId String   @map("realtion_id")

    @@map("tweets")
}

model Relation {
    id            String   @id @default(cuid())
    // name          String   @default("") // todo a name of relation can be set by user
    relationStart DateTime @default(now()) @map("relation_start")

    inviterUser User   @relation("inviterId", fields: [inviterId], references: [id], onDelete: Cascade)
    inviteeUser User   @relation("inviteeId", fields: [inviteeId], references: [id], onDelete: Cascade)
    // todo their two should not be equal.
    inviterId   String @unique @map("inviter_id")
    inviteeId   String @unique @map("invitee_id")

    tweets Tweet[]

    @@unique([inviterId, inviteeId])
    @@map("relations")
}
